% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data.R
\docType{data}
\name{Benaim}
\alias{Benaim}
\alias{benaim}
\alias{polyBenaim}
\title{Model \code{Benaim}}
\format{\code{Benaim} is an object of class \code{\link[pdmpsim]{pdmpModel}}, \cr 
  \code{polyBenaim} is an object of class \code{\link{polyPdmpModel}}.}
\source{
The model is introduced in [BenaimCo2012a] as example 1.3.
}
\usage{
Benaim

polyBenaim
}
\description{
This Model was first introduced by Benaim et al in 2012 (example 1.3).
It is an interesting example for the importance of the switching rates.
}
\section{Simulation}{

The simulations in PROM were done with slot \code{times} set to
\itemize{
\item \code{from = 0, to = 1000, by = 0.1.}
}
The following parameter sets were simulated:
\itemize{
\item \code{b = 2, beta = 1.6}
\item \code{b = 2, beta = 1.4}
\item \code{b = 2, beta = 1.3}
\item \code{b = 2, beta = 0.8}
\item \code{b = 2, beta = 0.5}
\item \code{b = 2, beta = 0.3}
}
}

\examples{
library(spray)
#------ code to generate the pdmpModel version -----

Benaim <- new("pdmpModel",
    descr = "Model B",
    parms = list(b = 2, β = 1.4),
    init = c(f1 = 10, f2 = 10, d = 1), 
    discStates = list(d = 0:1),
    dynfunc = function(t, x, parms) {
      df <- with(as.list(c(x, parms)), 
                 c(-f1, -f2) + switch(d+1, c(2*b*f2, 0), 
                                       c(0, 2*b*f1)))
      return(c(df, 0))
    }, 
    ratefunc = function(t, x, parms) {
      return(with(as.list(c(x, parms)), β/2))
    }, 
    jumpfunc = function(t, x, parms, jtype) {
      c(x[1:2], 1 - x[3])
    }, 
    times = c(from = 0, to = 100, by = 0.1),
    solver = "lsodar")

#------ code to generate the polyPdmpModel version -----

polyBenaim <- new("polyPdmpModel",
    descr = "Model B (polynomial version)",
    parms = list(b = 2, β = 1.4),
    init = c(f1 = 10, f2 = 10, d = 1), 
    discStates = list(d = 0:1),
    dynpolys = quote(list(
      list(overall = -lone(1,3), specific = list(2*b*lone(2,3), 0)),
      list(overall = -lone(2,3), specific = list(0, 2*b*lone(1,3)))
    )), 
    ratepolys = quote(list(
      list(β/2, β/2)
    )), 
    jumpfunc = function(t, x, parms, jtype) {
      c(x[1:2], 1 - x[3])
    }, 
    times = c(from = 0, to = 100, by = 0.1),
    solver = "lsodar")

#------- comparison of the models --------------

identical(sim(Benaim, outSlot = FALSE, seed = 10),
          sim(polyBenaim, outSlot = FALSE, seed = 10))
}
\keyword{datasets}
