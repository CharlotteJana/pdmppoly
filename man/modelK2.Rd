% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data.R
\docType{data}
\name{modelK2}
\alias{modelK2}
\alias{genePdmpK2}
\alias{genePolyK2}
\alias{geneK2}
\alias{genePolyK2}
\title{Gene regulation with constant activation and translation}
\format{\code{genePdmpK2} is an object of class \code{\link[pdmpsim]{pdmpModel}}, \cr 
  \code{genePolyK2} is an object of class \code{\link{polyPdmpModel}}.}
\source{
The model, including most of the parameter sets, are described in
  [RajCo2006] and [Zeiser2009]. The parameter values do not rely on real data.
}
\usage{
genePdmpK2

genePolyK2
}
\description{
This PDMP models the most simple situation of gene regulation,
where we have one gene and a constant activation rate without
a further regulation mechanism. Transcription and translation
are modeled separately which leads to a model wit two continous
variables (the first (\code{ξ1}) representing the mRNA and the
second (\code{ξ2}) representing the protein arising from translation).
In PROM, this model is referred to as \emph{Model K2},
therefore it is named \code{genePdmpK2} and \code{genePolyK2} here.
}
\section{Simulation}{

The simulations in PROM were done with slot \code{times} set to
\itemize{
\item \code{from = 0, to = 1000, by = 0.1.}
}
The following parameter sets were simulated:
\itemize{
\item \code{κ01 = 0.01, κ10 = 0.01, α1 = 1, β1 = 0.06, α2 = 0.5, β2 = 0.02}
\item \code{κ01 = 0.01, κ10 = 0.01, α1 = 1, β1 = 0.025, α2 = 0.5, β2 = 0.02}
\item \code{κ01 = 0.01, κ10 = 0.03, α1 = 1, β1 = 0.025, α2 = 0.5, β2 = 0.0025}
}
}

\examples{
library(spray)
#------ code to generate the pdmpModel version -----

genePdmpK2 <- new("pdmpModel",
   descr = "Model K2: constant activation with translation",
   parms = list(β1 = 0.025, α1 = 1, κ10 = 0.01, κ01 = 0.01, α2 = 0.5, β2 = 0.02),
   init = c(ξ1 = 0.5, ξ2 = 0, θ = 1), 
   discStates = list(θ = 0:1),
   dynfunc = function(t, x, parms) {
     dξ <- with(as.list(c(x, parms)), c(α1*θ - β1*ξ1, α2*ξ1-β2*ξ2))
     return(c(dξ, 0))
   }, 
   ratefunc = function(t, x, parms) {
     return(with(as.list(c(x, parms)), switch(θ + 1, κ01, κ10)))
   }, 
   jumpfunc = function(t, x, parms, jtype) {
     c(x[1:2], 1 - x[3])
   }, 
   times = c(from = 0, to = 100, by = 0.1), 
   solver = "lsodar")

#------ code to generate the polyPdmpModel version -----

genePolyK2 <- new("polyPdmpModel",
   descr = "Model K2: constant activation with translation (polynomial version)",
   parms = list(β1 = 0.025, α1 = 1, κ10 = 0.01, κ01 = 0.01, α2 = 0.5, β2 = 0.02),
   init = c(ξ1 = 0.5, ξ2 = 0, θ = 1), 
   discStates = list(θ = 0:1),
   dynpolys = quote(list(
     list(overall = linear(c(-β1, 0, α1))), #dξ1/dt = -β1ξ1 + α1θ
     list(overall = linear(c(α2, -β2, 0)))  #dξ2/dt = α2ξ1 - β2ξ2
   )),
   ratepolys = quote(list(
     list(κ01,κ10)
   )),
   jumpfunc = function(t, x, parms, jtype) {
     c(x[1:2], 1 - x[3])
   }, 
   times = c(from = 0, to = 100, by = 0.1),
   solver = "lsodar")

#------- comparison of the models --------------

identical(sim(genePdmpK2, outSlot = FALSE, seed = 20),
          sim(genePolyK2, outSlot = FALSE, seed = 20))
}
\keyword{datasets}
