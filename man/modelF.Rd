% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data.R
\docType{data}
\name{modelF}
\alias{modelF}
\alias{genePdmpF}
\alias{genePolyF}
\alias{geneF}
\alias{genePolyF}
\title{Gene regulation with positive feedback}
\format{\code{genePdmpF} is an object of class \code{\link[pdmpsim]{pdmpModel}}, \cr 
  \code{genePolyF} is an object of class \code{\link{polyPdmpModel}}.}
\source{
The model, including most of the parameter sets, are described in
  [Zeiser2009] and [ZeiserFranzLiebscher2000]. The parameter values do not
  rely on real data.
}
\usage{
genePdmpF

genePolyF
}
\description{
This PDMP models the most a gene regulation mechanism where we have one gene
and a positive feedback loop. This means that the rate to unblock the gene
depends on the concentration of the gene product \code{ξ}, where a high
concentration leads to a higher rate and vice versa. Transcription and
translation are considered as one step and are not modeled separately. In
PROM, this model is referred to as \emph{Model F₊}, therefore it is named
\code{genePdmpF} and \code{genePolyF} here.
}
\section{Simulation}{

The simulations in PROM were done with slot \code{times} set to
\itemize{
\item \code{from = 0, to = 1000, by = 0.1.}
}
The following parameter sets were simulated:
\itemize{
\item \code{κ01 = 0.02, κ10 = 0.02, α = 1, β = 0.2}
\item \code{κ01 = 0.02, κ10 = 0.02, α = 7, β = 0.2}
}
}

\examples{
library(spray)
#------ code to generate the pdmpModel version -----

genePdmpF <- new("pdmpModel",
   descr = "Model F: positive feedback",
   parms = list(β = 0.2, α = 7, κ10 = 0.02, κ01 = 0.02), 
   init = c(ξ = 1, θ = 1),
   discStates = list(θ = 0:1),
   dynfunc = function(t, x, parms) {
     dξ <- with(as.list(c(x, parms)), {α*θ - β*ξ})
     return(c(dξ, 0))
   }, 
   ratefunc = function(t, x, parms) {
     return(with(as.list(c(x, parms)), switch(θ + 1, κ01*ξ, κ10)))
   }, 
   jumpfunc = function(t, x, parms, jtype) {
     c(x[1], 1 - x[2])
   }, 
   times = c(from = 0, to = 100, by = 0.1), 
   solver = "lsodar")

#------ code to generate the polyPdmpModel version -----

genePolyF <- new("polyPdmpModel",
     descr = "Model F: positive feedback (polynomial version)",
     parms = list(β = 0.2, α = 7, κ10 = 0.02, κ01 = 0.02), 
     init = c(ξ = 1, θ = 1), 
     discStates = list(θ = 0:1),
     dynpolys = quote(list(
       list(overall = linear(c(-β,α)))
     )),
     ratepolys = quote(list(  
       list(κ01*lone(1,2), κ10)
     )),
     jumpfunc = function(t, x, parms, jtype) {
       c(x[1], 1 - x[2])
     }, 
     times = c(from = 0, to = 100, by = 0.1), 
     solver = "lsodar")

#------- comparison of the models --------------

identical(sim(genePdmpF, outSlot = FALSE, seed = 40),
          sim(genePolyF, outSlot = FALSE, seed = 40))
}
\keyword{datasets}
