% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data.R
\docType{data}
\name{modelKF}
\alias{modelKF}
\alias{genePdmpKF}
\alias{genePolyKF}
\alias{geneKF}
\alias{genePolyKF}
\title{Gene regulation with positive feedback and constant rates}
\format{\code{genePdmpKF} is an object of class \code{\link[pdmpsim]{pdmpModel}},\cr 
  \code{genePolyKF} is an object of class \code{\link{polyPdmpModel}}.}
\source{
The parameter values do not rely on real data.
}
\usage{
genePdmpKF

genePolyKF
}
\description{
This PDMP models a gene regulation mechanism similar to
\code{\link{genePolyF}}, where we have one gene and a positive feedback loop.
The rate to unblock the gene depends on the concentration of the gene product
\code{ξ}, but it is never zero because there is an additional rate that is
independet of \code{ξ}. Transcription and translation are considered as one
step and are not modeled separately. In PROM, this model is referred to as
\emph{Model F₊}, therefore it is named \code{genePdmpKF} and
\code{genePolyKF} here.
}
\section{Simulation}{

The simulations in PROM were done with slot \code{times} set to
\itemize{
\item \code{from = 0, to = 1000, by = 0.1.}
}
The following parameter sets were simulated:
\itemize{
\item \code{κ01 = 0.02, κ10 = 0.02, α = 1, β = 0.2}
\item \code{κ01 = 0.02, κ10 = 0.02, α = 7, β = 0.2}
}
}

\examples{
library(spray)
#------ code to generate the pdmpModel version -----

genePdmpKF <- new("pdmpModel",
                 descr = "Model KF: positive feedback with constant rate",
                 parms = list(β = 0.2, α = 7, κ10 = 0.02, κ01 = 0.02,
                               μ01 = 0.01, μ10 = 0.01), 
                 init = c(ξ = 1, θ = 1),
                 discStates = list(θ = 0:1),
                 dynfunc = function(t, x, parms) {
                   dξ <- with(as.list(c(x, parms)), {α*θ - β*ξ})
                   return(c(dξ, 0))
                 }, 
                 ratefunc = function(t, x, parms) {
                   return(with(as.list(c(x, parms)), 
                               switch(θ + 1, κ01*ξ + μ01, κ10 + μ10)))
                 }, 
                 jumpfunc = function(t, x, parms, jtype) {
                   c(x[1], 1 - x[2])
                 }, 
                 times = c(from = 0, to = 100, by = 0.1), 
                 solver = "lsodar")

#------ code to generate the polyPdmpModel version -----

genePolyKF <- new("polyPdmpModel",
                 descr = "Model KF: positive feedback with constant rate (polynomial version)",
                 parms = list(β = 0.2, α = 7, κ10 = 0.02, κ01 = 0.02,
                               μ01 = 0.01, μ10 = 0.01), 
                 init = c(ξ = 1, θ = 1), 
                 discStates = list(θ = 0:1),
                 dynpolys = quote(list(
                   list(overall = linear(c(-β,α)))
                 )),
                 ratepolys = quote(list(  
                   list(κ01*lone(1,2) + μ01, κ10 + μ10)
                 )),
                 jumpfunc = function(t, x, parms, jtype) {
                   c(x[1], 1 - x[2])
                 }, 
                 times = c(from = 0, to = 100, by = 0.1), 
                 solver = "lsodar")

#------- comparison of the models --------------

identical(sim(genePdmpKF, outSlot = FALSE, seed = 20),
          sim(genePolyKF, outSlot = FALSE, seed = 20))
}
\keyword{datasets}
