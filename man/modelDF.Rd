% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data.R
\docType{data}
\name{modelDF}
\alias{modelDF}
\alias{genePdmpDF}
\alias{genePolyDF}
\alias{geneDF}
\alias{genePolyDF}
\title{Gene regulation with positive feedback and dimerization}
\format{\code{genePdmpDF} is an object of class \code{\link[pdmpsim]{pdmpModel}}, \cr 
  \code{genePolyDF} is an object of class \code{\link{polyPdmpModel}}.}
\source{
The model, including most of the parameter sets, are described in
  [Zeiser2009]. The parameter values do not rely on real data.
}
\usage{
genePdmpDF

genePolyDF
}
\description{
This PDMP models the most a gene regulation mechanism where we have one gene
and a positive feedback loop. The activator however is not the gene product
itself but a dimer of two molecules of the genproduct. This means that we
have two continous variables \code{ξ} and \code{ξd} where \code{ξ} represents
the gene product and \code{ξd} the concentration of the dimerized gene
product. Transcription and translation are considered as one step and are not
modeled separately. In PROM, this model is referred to as \emph{Model DF},
therefore it is named \code{genePdmpDF} and \code{genePolyDF} here.
}
\section{Simulation}{

The simulations in PROM were done with slot \code{times} set to
\itemize{
\item \code{from = 0, to = 1000, by = 0.1.}
}
The following parameter sets were simulated:
\itemize{
\item \code{κ01 = 0.02, κ10 = 0.02, α = 1, β = 0.2, γ21 = 0.1, γ12 = 0.05}
\item \code{κ01 = 0.02, κ10 = 0.02, α = 1, β = 0.3, γ21 = 0.1, γ12 = 0.05}
\item \code{κ01 = 0.02, κ10 = 0.02, α = 1, β = 0.4, γ21 = 0.1, γ12 = 0.05}
\item \code{κ01 = 0.02, κ10 = 0.02, α = 1, β = 0.5, γ21 = 0.1, γ12 = 0.05}
}
}

\examples{
library(spray)
#------ code to generate the pdmpModel version -----

genePdmpDF <- new("pdmpModel", 
     descr = "Model DF: dimers + positive feedback",
     parms = list(β = 1, α = 1, κ01 = 1, κ10 = 1, γ21 = 1, γ12 = 1),
     init = c(ξ = 1, ξd = 0.5, θ = 1), 
     discStates = list(θ = 0:1),
     dynfunc = function(t, x, parms) {
       dξ <- with(as.list(c(x, parms)), 
                  c(-2*γ21*ξ^2 + 2*γ12*ξd - β*ξ + θ*α, 
                    γ21*ξ^2 - γ12*ξd))
       return(c(dξ, 0))
     }, 
     ratefunc = function(t, x, parms) {
       return(with(as.list(c(x, parms)),
                   c(switch(θ+1, κ01*ξd, κ10))))
     }, 
     jumpfunc = function(t, x, parms, jtype) {
       c(x[1:2], 1 - x[3])
     }, 
     times = c(from = 0, to = 100, by = 0.01), 
     solver = "lsodar")

#------ code to generate the polyPdmpModel version -----

library("spray")
genePolyDF <- new("polyPdmpModel", 
    descr = "Model DF: dimers + positive feedback (polynomial version)",
    parms = list(β = 1, α = 1, κ01 = 1, κ10 = 1, γ21 = 1, γ12 = 1), 
    init = c(ξ = 1, ξd = 0.5, θ = 1), 
    discStates = list(θ = 0:1),
    dynpolys = quote(list(
      list(overall = linear(c(-2*γ21, 0, 0), 2) + linear(c(-β, 2*γ12, α))),
      list(overall = linear(c(γ21, 0, 0), 2) - γ12*lone(2,3))
    )),
    ratepolys = quote(list(
      list(κ01*lone(2,3), κ10)
    )),
    jumpfunc = function(t, x, parms, jtype){
      c(x[1:2], 1 - x[3])
    }, 
    times = c(from = 0, to = 100, by = 0.01), 
    solver = "lsodar")

#------- comparison of the models --------------

all.equal(sim(genePdmpDF, outSlot = FALSE, seed = 12),
          sim(genePolyDF, outSlot = FALSE, seed = 12))
}
\keyword{datasets}
