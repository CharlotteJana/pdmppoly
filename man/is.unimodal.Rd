% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distributions_unimodal.R
\name{is.unimodal}
\alias{is.unimodal}
\alias{is.2_b_unimodal}
\alias{is.4_b_unimodal}
\title{Test if moments come from a unimodal distribution with compact support}
\usage{
is.unimodal(lower, upper, moments, eps = 1e-10)

is.2_b_unimodal(lower, upper, moments, eps = 1e-10)

is.4_b_unimodal(lower, upper, moments, eps = 1e-10)
}
\arguments{
\item{lower}{numeric. The lower bound A of the support \eqn{[A, B]} of the distribution.}

\item{upper}{numeric. The upper bound A of the support \eqn{[A, B]} of the distribution.}

\item{moments}{numeric vector giving the non standardized moments 
\eqn{m_1, m_2, m_3, ...}{m₁, m₂, m₃, ...}, sorted by their degree. 
This vector should have at least two entries.}

\item{eps}{numeric value. Some inequalities are of the form \code{... > 0}.
For numerical reasons it is better to test for \code{... > eps} where
\code{eps} is a small number.}
}
\value{
Character vector giving the results of the test. Possible values are
"not unimodal", "not existant", NA_character_ and "2-b-unimodal" or 
"4-b-unimodal".
}
\description{
Given a compact support \code{[A, B]} and moments \code{m1, m2, ...} of a 
one dimensional distribution, this method checks if the (unknown) 
distribution can be unimodal. \cr 
There exist several inequalities that test for nonunimodality (see References). 
Depending on the inequality, moments up to order 2 or 4 are
required. A distribution that satisfies all inequalities that contain only
moments up to order 2 is called \emph{2-b-unimodal}. A distribution that
satisfies all inequalities that contain only moments up to order 4 is called
\emph{4-b-unimodal}. The internal methods \code{is.2_b_unimodal} and
\code{is.4_b_unimodal} test these inequalities. Method \code{is.unimodal}
performs these checks, depending on the number of given distributions. A
4-b-unimodal distribution can still be nonunimodal (see the examples below).
But a failure of these tests assures the distribution not to be unimodal.
}
\examples{
### random example ###

  unimodal.example <- function(lower = 0, upper = 10){
    dis <- random.distribution(lower, upper)
    is.unimodal(lower, upper, mmix(1:4, lower, upper, distrib = dis))
  }
  unimodal.example()

### mixture of two normal distributions ###

  d <- list(list("norm", mean = 3),
            list("norm", mean = 13))
  
  is.unimodal(0, 20, mmix(1:4, 0, 20, distrib = d, weights = c(0.3, 0.7)))

  d[[2]]["mean"] <- 8
  is.unimodal(0, 20, mmix(1:4, 0, 20, distrib = d, weights = c(0.3, 0.7)))
  

### very close to unimodal ###

  d <- list(list(spec = "unif", min = 3, max = 4),
             list(spec = "lnorm", meanlog = 4))
  w <- c(10,1)
  curve(dmix(lower = 0, upper = 10, weights = w, distrib = d)(x), 0, 11)
  is.unimodal(0, 10, mmix(1:4, 0, 10, weights = w, distrib = d))
  
  
### not unimodal at all ###
  
  d <- list(list(spec = "exp"),
            list(spec = "unif", min = 0, max = 1),
            list(spec = "unif", min = 5, max = 6),
            list(spec = "unif", min = 0, max = 10))
  curve(dmix(lower = 0, upper = 10, distrib = d)(x), -1, 11)
  is.unimodal(0,10, mmix(1:4, 0, 10, distrib = d))

}
\references{
\insertRef{TeuscherGuiard1994}{pdmppoly}

\insertRef{JohnsonRogers1951}{pdmppoly}

\insertRef{SimpsonWelch1960}{pdmppoly}
}
