% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polypdmp_methods.R
\name{blowupSpray}
\alias{blowupSpray}
\title{Change discrete variable in a polynomial}
\usage{
blowupSpray(obj, spray)
}
\arguments{
\item{obj}{object of class \code{\link{polyPdmpModel}}.}

\item{spray}{object of class \code{spray}. This is the 
polynomial that shall be modified.}
}
\description{
This function takes a polynomial (represented by a \code{spray} object),
uses polyPdmpModel \code{obj} to identify the discrete variable and
substitutes this variable in the polynomial by several indicator
variables. The number of variables depends on the different possible
states that the discrete variable can take. The method is used internally
for computing the \code{\link{generator}} of a \code{polyPdmpModel}.
}
\details{
This function is best explained in an example. Lets assume that
we have one continous variable \code{f} and one discrete variable \code{d}
and that they are given in order \code{f, d} in variable \code{init(obj)}.
Let's have \code{discStates(obj) = list(d = -1:1)}, so \code{d} can take
the values -1, 0 or 1, respectively. A polynomial of arity 2 would then be
transformed into a polynomial of arity 4, where the second variable (that 
stands for \code{d}) is replaced by three indicator variables 
\code{d1, d2, d3}, that can only take values 0 or 1, depending on the
value of the original \code{d}. If we take for example the polynomial
 \eqn{5f^2d^3 + f}{5f²d³ + f}, method \code{blowupSpray} changes it into
\deqn{
5f^3\cdot(-1)\cdot d1 + 5f^3\cdot 0 \cdot d2 + 5f³\cdot 1\cdot d3 + f 
= -5f^3d1 + 5f^3d3 + f.}{
5f³⋅(-1)⋅d1 + 5f³⋅0⋅d2 + 5f³⋅1⋅d3 + f = -5f³d1 + 5f³d3 + f.}
If the order of \code{f} and \code{d} are reversed (i.e. \code{init(obj) =
c(d = ..., f = ...)}), the additional variables \code{d1, d2, d3} would 
still be added at the end, leaving \code{f} to be the first variable.
}
\note{
This method only works for one discrete variable
}
\examples{
# the examples discussed in section details:
library(spray)
data("simplePoly") 
blowupSpray(simplePoly, 5*product(2:3) + lone(1, 2))

# with other order in slot init:
init(simplePoly) <- c(d = 1, f = 2)
blowupSpray(simplePoly, 5*product(3:2) + lone(2, 1))  

}
