% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data.R
\docType{data}
\name{modelBF}
\alias{modelBF}
\alias{genePdmpBF}
\alias{genePolyBF}
\alias{geneBF}
\title{Gene regulation with positive feedback with basal transcription}
\format{\code{genePdmpBF} is an object of class \code{\link[pdmpsim]{pdmpModel}},\cr 
  \code{genePolyBF} is an object of class \code{\link{polyPdmpModel}}.}
\source{
The parameter values do not rely on real data.
}
\usage{
genePdmpBF

genePolyBF
}
\description{
This PDMP models a gene regulation mechanism similar to
\code{\link{genePolyF}}, where we have one gene and a positive feedback loop.
The difference is that in both discrete states transcription takes place, but
with different rates \eqn{a_0, a_1}, where \eqn{a_0 < a_1}. Transcription and
translation are considered as one step and are not modeled separately. In
PROM, this model is referred to as \emph{Model BF+}, therefore it is named
\code{genePdmpBF} and \code{genePolyBF} here.
}
\section{Simulation}{

The simulations in PROM were done with slot \code{times} set to
\itemize{
\item \code{from = 0, to = 1000, by = 0.1.}
}
The following parameter sets were simulated:
\itemize{
\item \code{k01 = 0.02, k10 = 0.02, a = 1, b = 0.2}
\item \code{k01 = 0.02, k10 = 0.02, a = 7, b = 0.2}
}
}

\examples{
library(spray)
#------ code to generate the pdmpModel version -----

genePdmpBF <- new("pdmpModel",
                  descr = "Model BF: positive feedback with basal transcription",
                  parms = list(b = 0.2, a0 = 1, a1 = 7, k10 = 0.02, k01 = 0.02), 
                  init = c(f = 1, d = 1),
                  discStates = list(d = 0:1),
                  dynfunc = function(t, x, parms) {
                    df <- with(as.list(c(x, parms)), {
                      switch(d+1, a0 - b*f, a1 - b*f)
                    })
                    return(c(df, 0))
                  }, 
                  ratefunc = function(t, x, parms) {
                    return(with(as.list(c(x, parms)), switch(d + 1, k01*f, k10)))
                  }, 
                  jumpfunc = function(t, x, parms, jtype) {
                    c(x[1], 1 - x[2])
                  }, 
                  times = c(from = 0, to = 100, by = 0.1), 
                  solver = "lsodar")

#------ code to generate the polyPdmpModel version -----

genePolyBF <- new("polyPdmpModel",
                  descr = "Model BF: pos. feedback with basal transcription (polynomial version)",
                  parms = list(b = 0.2, a0 =1, a1 = 7, k10 = 0.02, k01 = 0.02), 
                  init = c(f = 1, d = 1), 
                  discStates = list(d = 0:1),
                  dynpolys = quote(list(
                    list(overall = -b*lone(1,2),
                         specific = list(a0, a1))
                  )),
                  ratepolys = quote(list(  
                    list(k01*lone(1,2), k10)
                  )),
                  jumpfunc = function(t, x, parms, jtype) {
                    c(x[1], 1 - x[2])
                  }, 
                  times = c(from = 0, to = 100, by = 0.1), 
                  solver = "lsodar")

#------- comparison of the models --------------

identical(sim(genePdmpBF, outSlot = FALSE, seed = 20),
          sim(genePolyBF, outSlot = FALSE, seed = 20))
}
\keyword{datasets}
